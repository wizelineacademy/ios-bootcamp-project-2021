//
//  DetailViewController.swift
//  TheMovieDb
//
//  Created by Misael Ch√°vez on 30/11/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: AnyObject {
    func displayMovieData(viewModel: Detail.Movie.ViewModel)
    func displayImageMovieData(viewModel: Detail.Movie.ViewModel, uiImage: UIImage?)
}

class DetailViewController: UIViewController, DetailDisplayLogic {
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    let detailView = DetailView()
    let movieViewModel: MovieViewModel
    
    // MARK: Object lifecycle
    init(movieViewModel: MovieViewModel, nibName: String? = nil, bundle: Bundle? = nil) {
        self.movieViewModel = movieViewModel
        super.init(nibName: nibName, bundle: bundle)
        self.setup()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = DetailInteractor(movieViewModel: movieViewModel)
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func loadView() {
        view = detailView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        loadMovieData()
    }
    
    // MARK: Do something
    func loadMovieData() {
        let request = Detail.Movie.Request()
        interactor?.doLoadMovieData(request: request)
    }
    
    func displayMovieData(viewModel: Detail.Movie.ViewModel) {
        detailView.movieTitle.text = movieViewModel.title
        detailView.movieMediaType.text = movieViewModel.mediaType
        detailView.movieReleaseDate.text = movieViewModel.releaseDate
        detailView.movieOverview.text = movieViewModel.overview
        detailView.movieRating.text = String(movieViewModel.rating)
        detailView.showReviewsButton.addTarget(self, action: #selector(navigateToReviews), for: .touchUpInside)
        detailView.closeButton.addTarget(self, action: #selector(closeView), for: .touchUpInside)
    }
    
    func displayImageMovieData(viewModel: Detail.Movie.ViewModel, uiImage: UIImage?) {
        detailView.moviePoster.image = uiImage
    }
    
    @objc func navigateToReviews() {
        router?.routeToReviews()
    }
    
    @objc func closeView() {
        dismiss(animated: true)
    }
}
